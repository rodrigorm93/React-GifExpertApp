{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAKd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,YCPdG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEvC,OADAC,QAAQC,IAAIJ,EAAIC,EAAOC,GAErB,yBAAKG,UAAU,4DACb,yBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,2BAAIA,K,uBCNGO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfR,EADe,0FAC0ES,UAC7FF,GAFmB,sBAIFG,MAAMV,GAJJ,cAIfW,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAVjB,kBAadc,GAbc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACdvB,mBAAS,CACjC6B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACb,IAEGc,EDNmBK,CAAanB,GAA/BM,EAN+B,EAM/BA,KAAMO,EANyB,EAMzBA,QAEd,OACE,oCACE,4BAAKb,GAEJa,GAAW,yCACZ,yBAAKjB,UAAU,aACZU,EAAKE,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,eAAaW,IAAKX,EAAIlB,IAAQkB,UEf3BY,EAAe,WAAM,MAGI5C,mBAAS,CAAC,SAHd,mBAGzB6C,EAHyB,KAGb9C,EAHa,KAShC,OACE,6BACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACA,4BACG8C,EAAWd,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASoB,IAAKpB,EAAUA,SAAUA,UCjB5CuB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.b20f629d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    //console.log(e.target.value);\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]); //vamos agregando valores al arreglo\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  console.log(id, title, url);\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","//encodeUri: reemplazo los espacios\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=pJVK1of55YADA58T4Gka4i1JpymFBuK0&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n//import { geetGifs } from \"./helpers/getGifs\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n  //useEffect(() => {\r\n  //  geetGifs(category).then((imgs) => setImages(imgs));\r\n  // }, [category]);\r\n\r\n  const { data, loading } = useFetchGifs(category);\r\n  //geetGifs();\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {loading && <p>Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {data.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) =>\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      })\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  //const categorias = [\"goku\", \"one piece\", \"vegeta\"];\r\n\r\n  const [categories, setCategories] = useState([\"goku\"]);\r\n\r\n  //const hadleAdd = () => {\r\n  //setCategories([...categories, \"hola\"]);\r\n  //};\r\n\r\n  return (\r\n    <div>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}